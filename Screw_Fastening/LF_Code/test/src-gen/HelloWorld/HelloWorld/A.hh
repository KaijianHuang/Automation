/*
 * This file was autogenerated by the Lingua Franca Compiler.
 *
 * Source: platform:/resource/test/src/HelloWorld.lf
 */
 
#pragma once

#include "reactor-cpp/reactor-cpp.hh"
#include "lfutil.hh"

using namespace std::chrono_literals;

#include "HelloWorld/_lf_preamble.hh"

        

// public preamble


class A: public reactor::Reactor {
public:
  struct Parameters {
        
  };

 private:
        

  class Inner: public lfutil::LFScope, public Parameters {
        
    // state variable
    
    // methods
    
    // reaction bodies
    void r0_body(
      [[maybe_unused]] const reactor::Input<int>& x,
      reactor::Output<int>& y); 
    void r1_body(
      [[maybe_unused]] const reactor::Input<int>& x,
      [[maybe_unused]] const reactor::Input<int>& z,
      reactor::Output<int>& y); 
    // deadline handlers
    

    Inner(reactor::Reactor* reactor, Parameters&& parameters);

   friend A;
  };

  Inner __lf_inner;

        
  // reactor instances
  // timers
  
  // actions
  
  // default actions
  reactor::StartupTrigger startup {"startup", this};
  reactor::ShutdownTrigger shutdown {"shutdown", this};
  // reaction views
  
  
  // reactions
  void r0_body() { __lf_inner.r0_body(x, y); }
  reactor::Reaction r0{"reaction_1", 1, this, [this]() { r0_body(); }}; 
  void r1_body() { __lf_inner.r1_body(x, z, y); }
  reactor::Reaction r1{"reaction_2", 2, this, [this]() { r1_body(); }}; 

 public:
  // input ports
  reactor::Input<int> x{"x", this};
  reactor::Input<int> z{"z", this};
  // output ports
  reactor::Output<int> y{"y", this};
  A(const std::string& name, reactor::Environment* __lf_environment, Parameters&& __lf_parameters);
  A(const std::string& name, reactor::Reactor* __lf_container, Parameters&& __lf_parameters);

  void assemble() override;
 
 private:
  // connections 
  
};

        
