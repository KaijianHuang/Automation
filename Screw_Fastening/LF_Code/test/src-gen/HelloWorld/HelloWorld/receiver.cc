/*
 * This file was autogenerated by the Lingua Franca Compiler.
 *
 * Source: platform:/resource/test/src/HelloWorld.lf
 */

#include "HelloWorld/receiver.hh"

using namespace reactor::operators;

  // private preamble

// outer constructor
receiver::receiver(const std::string& name, reactor::Environment* __lf_environment, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_environment)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  // timers
  // actions
  , ready{"ready", this, reactor::Duration::zero()}
  , interval{"interval", this, reactor::Duration::zero()}
            
  // reaction views
  
  
{
            
            
  // reaction views
  
  
}
receiver::receiver(const std::string& name, reactor::Reactor* __lf_container, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_container)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  // timers
  // actions
  , ready{"ready", this, reactor::Duration::zero()}
  , interval{"interval", this, reactor::Duration::zero()}
            
  // reaction views
  
  
{
            
            
  // reaction views
  
  
}

// inner constructor
receiver::Inner::Inner(::reactor::Reactor* reactor, Parameters&& __lf_parameters)
  : LFScope(reactor)
  , Parameters(std::forward<Parameters>(__lf_parameters))
  // state variables
{}

void receiver::assemble() {
  // r0
  r0.declare_trigger(&startup);
          
  r0.declare_schedulable_action(&ready);
          
  
  // r1
  r1.declare_trigger(&ia);
          
          
  // connections
}

// methods


// reaction reaction_1

void receiver::Inner::r0_body(
  [[maybe_unused]] const reactor::StartupTrigger& startup,
  reactor::LogicalAction<void>& ready)  {
  cout<<"start in receiver"<<endl;
}

// reaction reaction_2

void receiver::Inner::r1_body([[maybe_unused]] const reactor::Input<double>& ia) {
  cout<<"receive i a"<<endl;
}

        
