/*
 * This file was autogenerated by the Lingua Franca Compiler.
 *
 * Source: platform:/resource/test/src/ScrewFastening.lf
 */

#include "ScrewFastening/ScrewFastening.hh"

using namespace reactor::operators;

  // private preamble

// outer constructor
ScrewFastening::ScrewFastening(const std::string& name, reactor::Environment* __lf_environment, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_environment)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  , r(std::make_unique<robot>("r", this, robot::Parameters{}))
  , v(std::make_unique<vision>("v", this, vision::Parameters{}))
  , c(std::make_unique<automation_control>("c", this, automation_control::Parameters{}))
  // timers
  // actions
  
  , connection_r_position_oz{"connection_r_position_oz", this, reactor::Duration::zero()}
  // reaction views
  
{
            
            
  // reaction views
  
}
ScrewFastening::ScrewFastening(const std::string& name, reactor::Reactor* __lf_container, Parameters&& __lf_parameters)
  : reactor::Reactor(name, __lf_container)
  , __lf_inner(this, std::forward<Parameters>(__lf_parameters))
  //reactor instances
  , r(std::make_unique<robot>("r", this, robot::Parameters{}))
  , v(std::make_unique<vision>("v", this, vision::Parameters{}))
  , c(std::make_unique<automation_control>("c", this, automation_control::Parameters{}))
  // timers
  // actions
  
  , connection_r_position_oz{"connection_r_position_oz", this, reactor::Duration::zero()}
  // reaction views
  
{
            
            
  // reaction views
  
}

// inner constructor
ScrewFastening::Inner::Inner(::reactor::Reactor* reactor, Parameters&& __lf_parameters)
  : LFScope(reactor)
  , Parameters(std::forward<Parameters>(__lf_parameters))
  // state variables
{}

void ScrewFastening::assemble() {
        
  // connections
  // connection 0
  v->detection_num.bind_to(&c->detection_num);
  // connection 1
  v->error_x.bind_to(&c->error_x);
  // connection 2
  v->error_y.bind_to(&c->error_y);
  // connection 3
  connection_r_position_oz.bind_upstream_port(&r->position_oz);
  connection_r_position_oz.bind_downstream_port(&c->z);
  // connection 4
  c->position_x.bind_to(&r->position_x);
  // connection 5
  c->position_y.bind_to(&r->position_y);
  // connection 6
  c->position_z.bind_to(&r->position_z);
  // connection 7
  c->speed_x.bind_to(&r->speed_x);
  // connection 8
  c->speed_y.bind_to(&r->speed_y);
  // connection 9
  c->speed_z.bind_to(&r->speed_z);
}

// methods


        
        
