target Cpp{
//    timeout:10s,
    cmake-include:[
        "LibraryImport.cmake"
    ],
}




public preamble {= 
    #include <iostream>
    #include <fstream>
    #include <iomanip>
    #include <string>
    #include "apriltag.h"
    #include "apriltag_pose.h"
    #include "common/getopt.h"
    #include "common/homography.h"
    #include "tag16h5.h"
    #include "tag25h9.h"
    #include "tag36h11.h"
    #include "tagCircle21h7.h"
    #include "tagCircle49h12.h"
    #include "tagCustom48h12.h"
    #include "tagStandard41h12.h"
    #include "tagStandard52h13.h"
    #include "HalconCpp.h"
    #include "HDevThread.h"
    #include <opencv2/opencv.hpp>
    #include <opencv2/highgui.hpp>
    #include <opencv2/imgproc.hpp>
    #include <opencv2/videoio.hpp>
    #include <sstream>
    #include <ur_rtde/rtde_control_interface.h>
    #include <ur_rtde/rtde_receive_interface.h>
    
    #include <thread>
    #include <chrono>
    #include <ctime>
    #include <time.h>
    #include <cmath>
    #include <math.h>
    using namespace ur_rtde;
    using namespace std::chrono;
    using namespace HalconCpp;
    using namespace std;
    using namespace cv;
    const double desired_x = 1261.2;
    const double desired_y = 862.4;
    const float speed_x_Threshold = 0.05;
    const float speed_y_Threshold = 0.05;
    const double IntegralX_Threshold = 300000;
    const double IntegralY_Threshold = 300000;
    
    cv::Mat HImageToMat(HalconCpp::HObject &H_img);
=}

reactor vision(period:time(100ms)){
    
    output error_x:double
    output error_y:double
    output detection_num:int
    
    
    state hv_AcqHandle: HTuple
    state img: Mat
    state tf:apriltag_family_t*(0)
    state td:apriltag_detector_t *(0)
    
    logical action ready
    logical action interval
    
    
    reaction(startup)->ready{=
        
        OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", -1, "default", 
          -1, "false", "default", "000748eb0dd2_TheImagingSourceEuropeGmbH_DFK33GX264e", 
          0, -1, &hv_AcqHandle);
        GrabImageStart(hv_AcqHandle, -1);
        tf = tag36h11_create();
        td = apriltag_detector_create();
        apriltag_detector_add_family(td, tf);
        std::cout << "vision "<< std::endl;
        ready.schedule(period);
    =}
    
    reaction(ready, interval)->error_x, error_y, detection_num,interval{=
        HObject  ho_Image;
        GrabImageAsync(&ho_Image, hv_AcqHandle, 0.5);  
        cv::Mat matColor = HImageToMat(ho_Image); 
        cv::Mat gray;      
        cv::cvtColor(matColor, gray, cv::COLOR_BGR2GRAY);
        image_u8_t im = {gray.cols, gray.rows, gray.cols, gray.data};  
         
        zarray_t *detections = apriltag_detector_detect(td, &im);
        int detect_number = zarray_size(detections);
        bool b_non_sense = false;
        if(detect_number > 0){
            apriltag_detection_t *det;
            zarray_get(detections, 0, &det);
            double object_x = det->c[0];
            double object_y = det->c[1];
            double t_error_x = object_x - desired_x;
            double t_error_y = object_y - desired_y;
            if(abs(t_error_y) < 100.0){
               
               error_x.set(object_x - desired_x);
               error_y.set(object_y - desired_y);
            }
            else{
                std::cout << "detect non-sense value"<< std::endl;
                b_non_sense = true;
            }
            std::cout << "errorX: "<<object_x - desired_x  << " errorY: "<< object_y - desired_y <<"detect number: "<< detect_number<< endl;
            
        }
        apriltag_detections_destroy(detections);
        if(!b_non_sense)
            detection_num.set(detect_number);
//        std::cout  << "vision detect: Logical time is " << get_logical_time() << " Microstep: " << get_microstep() <<std::endl;
        interval.schedule(period);
    =}
    
    
}
reactor automation_control(period:time(100ms)){
    input detection_num:int
    input error_x:double
    input error_y:double
    input z:double

    
    output speed_x:float
    output speed_y:float
    output speed_z:float
    output position_x:double
    output position_y:double
    output position_z:double
    
    
    state Kp:double(0.00005)//0.00005
    state Ki:double( 0.0000008)//0.0000001
    
    state integral_x:double(0)
    state integral_y:double(0)
    
    state sleep:time(2000ms)
    
    /*processing reset*/
    state b_reset:bool(false)
    /*process once*/
    state already_reset:bool(false)
    
    logical action up
    logical action origin
    logical action ready
    
    @label("pid control")
    reaction(error_x, error_y, z)->speed_x, speed_y, speed_z{=
        //sometimes error_x is present,but not valid,
        //TODO:
        std::cout  << "pid control: Logical time is " << get_logical_time() << " Microstep: " << get_microstep() <<std::endl;
        if(!error_x.is_present() || !error_y.is_present()){
            return;
        }
        if(b_reset )
            return;
        
        if( *z.get() < 0.360){ //*0.339
            std::cout << "pid control will be disabled" << endl;
            return;
        }
        
        double t_speed_x = Kp * (*error_x.get()) + Ki * integral_x;
        double t_speed_y = Kp * (*error_y.get()) + Ki * integral_y;
        cout << "---------------------Speed----------------------"<<endl;
        cout << "speed_x = "<<Kp << " * "<<*error_x.get()<<" + "<<Ki<<" * "<<integral_x<<endl;
        cout << "speed_y = "<<Kp << " * "<<*error_y.get()<<" + "<<Ki<<" * "<<integral_y<<endl;
        
        
        //PID control x
        if (fabs(t_speed_x) <= speed_x_Threshold){
          if(fabs(integral_x) <= IntegralX_Threshold){
            integral_x += (*error_x.get()) ;
          }  
        }
        else if(t_speed_x > speed_x_Threshold){
          t_speed_x = speed_x_Threshold;
        }
        else if(t_speed_x < speed_x_Threshold){
          t_speed_x = -speed_x_Threshold;
        }
        
        //PID control y
        if (fabs(t_speed_y) <= speed_y_Threshold){
          if(fabs(integral_y) <= IntegralY_Threshold){
            integral_y += (*error_y.get()) ;
          }  
        }
        else if(t_speed_y > speed_y_Threshold){
          t_speed_y = speed_y_Threshold;
        }
        else if(t_speed_y < speed_y_Threshold){
          t_speed_y = -speed_y_Threshold;
        }
        
        double t_speed_z = -0.004;
        if(abs(*error_x.get()) > 300){
            t_speed_z = 0.02;
            if((*z.get()) > 0.450){
                 t_speed_z = -0.004;
            }
        }
        
        speed_x.set(t_speed_x);
        speed_y.set(t_speed_y);
        speed_z.set(t_speed_z);
        cout << "speed x: "<<t_speed_x <<"speed y:"<< t_speed_y <<"speed z:"<<t_speed_z<<endl;
    =}
    
    
    @label("reset control")
    reaction(detection_num)->speed_z, origin{=
        std::cout <<"b_reset"<<b_reset<<"*detection_num.get()"<<*detection_num.get()<< endl;
        if(*detection_num.get() > 0){
            already_reset = false;
        }

        if(b_reset)
            return;
        
        if( *detection_num.get() == 0 && !already_reset){
            std::cout << "*detection_num.get() = "<<*detection_num.get() << std::endl;
            b_reset = true;
            integral_x = 0.0;
            integral_y = 0.0;
            speed_z.set(0.0);
            already_reset = true;
            origin.schedule(sleep);
        }
    =}
    
    @label("start screwing")
    reaction(z)->speed_z, up{=
        std::cout << "z.is_present()" << z.is_present() <<"b_reset"<<b_reset<<"*z.get()"<<*z.get()<< endl;

        if(!z.is_present())
            return;
        if(*z.get() > 0.405)
            b_reset = false;
        
        if(b_reset)
            return;
        
        if(*z.get() < 0.339){
            std::cout << "reset control" << std::endl;
            b_reset = true;
            integral_x = 0.0;
            integral_y = 0.0;
            speed_z.set(0.0);
            up.schedule(sleep);
        }
    =}
    
    @label("screwer up")
    reaction(up)->speed_z,origin{=
        std::cout << "screwer up control" << std::endl;
        speed_z.set(0.02);
        origin.schedule(sleep);
    =}
    
    @label("go to origin position")
    reaction(origin)->position_x, position_y,position_z {=
        std::cout << "go to origin position control" << std::endl;
        position_x.set(0.0);
        position_y.set(0.0);
        position_z.set(0.0);
        
    =}
    
}

reactor robot(period:time(100ms)){
    input speed_x:float
    input speed_y:float
    input speed_z:float
    input position_x:double
    input position_y:double
    input position_z:double
    
    output position_oz:double
    
    logical action ready;
    logical action interval;
    
    state rtde_control:RTDEControlInterface*;
    state rtde_receive:RTDEReceiveInterface*;
    
    @label("startup")
    reaction(startup)->ready{=
        rtde_control = new RTDEControlInterface("10.192.50.146");
        rtde_receive = new RTDEReceiveInterface("10.192.50.146");
        std::cout << "ready "<< std::endl;
        ready.schedule(period);
    =}
    
    @label("get_tcp_pose")
    reaction(ready,interval)->position_oz, interval{=
        vector<double> Tcp_pose = rtde_receive->getActualTCPPose();
        position_oz.set(Tcp_pose[2]);
        std::cout  << "robot status: Logical time is " << get_logical_time() << " Microstep: " << get_microstep() <<std::endl;
        interval.schedule(period);
    =}
    
    @label("control speed")
    reaction(speed_x, speed_y, speed_z) {=
        std::cout << "control speed: *speed_x.get():"<< *speed_x.get() <<"*speed_y.get()"<<*speed_y.get()<<"*speed_z.get()"<<*speed_z.get()<< std::endl;
        rtde_control->speedL({*speed_y.get(), *speed_x.get(), *speed_z.get(),0,0,0},0.5,1);
    =}
    
    @label("control position")
    reaction(position_x, position_y, position_z){=
        std::cout << "control position" << std::endl;
        while(rtde_control->speedStop(0.5) == false){
          std::this_thread::sleep_for(std::chrono::milliseconds(200));
        }
        rtde_control->moveL({0.367, -0.420, 0.407, 0.021,3.124,0},0.2,1);
        std::this_thread::sleep_for(std::chrono::milliseconds(2000));
        rtde_control->stopL(0.5, false);
    =}
    
    
    
    
    @label("shutdown")
    reaction(shutdown){=
        delete rtde_control;
        delete rtde_receive;
    =}
}

main reactor {
    r = new robot();
    v = new vision();
    c = new automation_control();
    v.detection_num -> c.detection_num;
    v.error_x -> c.error_x;
    v.error_y -> c.error_y;
    r.position_oz -> c.z after 0;
    c.position_x -> r.position_x;
    c.position_y -> r.position_y;
    c.position_z -> r.position_z;
    c.speed_x -> r.speed_x;
    c.speed_y -> r.speed_y;
    c.speed_z -> r.speed_z;
    
}






